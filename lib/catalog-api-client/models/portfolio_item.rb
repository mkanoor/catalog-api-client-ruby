=begin
#Catalog API

#This API gets and orders catalog items from different cloud sources.

OpenAPI spec version: 1.0.0
Contact: support@redhat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'date'

module CatalogApiClient
  class PortfolioItem
    attr_accessor :id

    attr_accessor :favorite

    attr_accessor :name

    attr_accessor :description

    attr_accessor :orphan

    attr_accessor :state

    attr_accessor :display_name

    attr_accessor :long_description

    attr_accessor :distributor

    attr_accessor :documentation_url

    attr_accessor :support_url

    attr_accessor :workflow_ref

    attr_accessor :owner

    # The source reference this product was created from
    attr_accessor :service_offering_source_ref

    attr_accessor :created_at

    attr_accessor :updated_at

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'favorite' => :'favorite',
        :'name' => :'name',
        :'description' => :'description',
        :'orphan' => :'orphan',
        :'state' => :'state',
        :'display_name' => :'display_name',
        :'long_description' => :'long_description',
        :'distributor' => :'distributor',
        :'documentation_url' => :'documentation_url',
        :'support_url' => :'support_url',
        :'workflow_ref' => :'workflow_ref',
        :'owner' => :'owner',
        :'service_offering_source_ref' => :'service_offering_source_ref',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'favorite' => :'BOOLEAN',
        :'name' => :'String',
        :'description' => :'String',
        :'orphan' => :'BOOLEAN',
        :'state' => :'String',
        :'display_name' => :'String',
        :'long_description' => :'String',
        :'distributor' => :'String',
        :'documentation_url' => :'String',
        :'support_url' => :'String',
        :'workflow_ref' => :'String',
        :'owner' => :'String',
        :'service_offering_source_ref' => :'String',
        :'created_at' => :'DateTime',
        :'updated_at' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'favorite')
        self.favorite = attributes[:'favorite']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'orphan')
        self.orphan = attributes[:'orphan']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.has_key?(:'long_description')
        self.long_description = attributes[:'long_description']
      end

      if attributes.has_key?(:'distributor')
        self.distributor = attributes[:'distributor']
      end

      if attributes.has_key?(:'documentation_url')
        self.documentation_url = attributes[:'documentation_url']
      end

      if attributes.has_key?(:'support_url')
        self.support_url = attributes[:'support_url']
      end

      if attributes.has_key?(:'workflow_ref')
        self.workflow_ref = attributes[:'workflow_ref']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'service_offering_source_ref')
        self.service_offering_source_ref = attributes[:'service_offering_source_ref']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @service_offering_source_ref.nil?
        invalid_properties.push('invalid value for "service_offering_source_ref", service_offering_source_ref cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @display_name.nil?
      return false if @service_offering_source_ref.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          favorite == o.favorite &&
          name == o.name &&
          description == o.description &&
          orphan == o.orphan &&
          state == o.state &&
          display_name == o.display_name &&
          long_description == o.long_description &&
          distributor == o.distributor &&
          documentation_url == o.documentation_url &&
          support_url == o.support_url &&
          workflow_ref == o.workflow_ref &&
          owner == o.owner &&
          service_offering_source_ref == o.service_offering_source_ref &&
          created_at == o.created_at &&
          updated_at == o.updated_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, favorite, name, description, orphan, state, display_name, long_description, distributor, documentation_url, support_url, workflow_ref, owner, service_offering_source_ref, created_at, updated_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CatalogApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
