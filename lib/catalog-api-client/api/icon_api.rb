=begin
#Catalog API

#This API gets and orders catalog items from different cloud sources.

OpenAPI spec version: 1.0.0
Contact: support@redhat.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 3.3.4

=end

require 'uri'

module CatalogApiClient
  class IconApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete an existing Icon
    # Deletes the icon based on the icon ID passed 
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def destroy_icon(id, opts = {})
      destroy_icon_with_http_info(id, opts)
      nil
    end

    # Delete an existing Icon
    # Deletes the icon based on the icon ID passed 
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def destroy_icon_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IconApi.destroy_icon ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IconApi.destroy_icon"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling IconApi.destroy_icon, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/icons/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IconApi#destroy_icon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch an Icon by ID
    # Fetch an Icon by ID
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Icon]
    def icons_id_get(id, opts = {})
      data, _status_code, _headers = icons_id_get_with_http_info(id, opts)
      data
    end

    # Fetch an Icon by ID
    # Fetch an Icon by ID
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(Icon, Fixnum, Hash)>] Icon data, response status code and response headers
    def icons_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IconApi.icons_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IconApi.icons_id_get"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling IconApi.icons_id_get, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/icons/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Icon')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IconApi#icons_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Icon
    # Creates an Icon from the specified parameters
    # @param [Hash] opts the optional parameters
    # @option opts [Icon] :icon 
    # @return [Icon]
    def icons_post(opts = {})
      data, _status_code, _headers = icons_post_with_http_info(opts)
      data
    end

    # Create an Icon
    # Creates an Icon from the specified parameters
    # @param [Hash] opts the optional parameters
    # @option opts [Icon] :icon 
    # @return [Array<(Icon, Fixnum, Hash)>] Icon data, response status code and response headers
    def icons_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IconApi.icons_post ...'
      end
      # resource path
      local_var_path = '/icons'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'icon'])
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Icon')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IconApi#icons_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Override the specified Portfolio Item's Icon
    # Override the specified Portfolio Item's Icon
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OverrideIcon] :override_icon 
    # @return [Icon]
    def override_icon(id, opts = {})
      data, _status_code, _headers = override_icon_with_http_info(id, opts)
      data
    end

    # Override the specified Portfolio Item&#39;s Icon
    # Override the specified Portfolio Item&#39;s Icon
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @option opts [OverrideIcon] :override_icon 
    # @return [Array<(Icon, Fixnum, Hash)>] Icon data, response status code and response headers
    def override_icon_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IconApi.override_icon ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IconApi.override_icon"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling IconApi.override_icon, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/icons/{id}/override'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'override_icon'])
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Icon')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IconApi#override_icon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetches the specified icon's image
    # Fetch the specified portfolio item's icon image.
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def show_icon_data(id, opts = {})
      show_icon_data_with_http_info(id, opts)
      nil
    end

    # Fetches the specified icon&#39;s image
    # Fetch the specified portfolio item&#39;s icon image.
    # @param id ID of the resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def show_icon_data_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IconApi.show_icon_data ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IconApi.show_icon_data"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling IconApi.show_icon_data, must conform to the pattern /^\d+$/."
      end

      # resource path
      local_var_path = '/icons/{id}/icon_data'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/svg+xml'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IconApi#show_icon_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an existing Icon
    # Edits Icon specified by the given ID.
    # @param id ID of the resource
    # @param icon Parameters needed to update an Icon
    # @param [Hash] opts the optional parameters
    # @return [Icon]
    def update_icon(id, icon, opts = {})
      data, _status_code, _headers = update_icon_with_http_info(id, icon, opts)
      data
    end

    # Edit an existing Icon
    # Edits Icon specified by the given ID.
    # @param id ID of the resource
    # @param icon Parameters needed to update an Icon
    # @param [Hash] opts the optional parameters
    # @return [Array<(Icon, Fixnum, Hash)>] Icon data, response status code and response headers
    def update_icon_with_http_info(id, icon, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IconApi.update_icon ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IconApi.update_icon"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/^\d+$/)
        fail ArgumentError, "invalid value for 'id' when calling IconApi.update_icon, must conform to the pattern /^\d+$/."
      end

      # verify the required parameter 'icon' is set
      if @api_client.config.client_side_validation && icon.nil?
        fail ArgumentError, "Missing the required parameter 'icon' when calling IconApi.update_icon"
      end
      # resource path
      local_var_path = '/icons/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(icon)
      auth_names = ['BasicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Icon')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IconApi#update_icon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

  end
end
