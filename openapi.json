{
  "openapi": "3.0.0",
  "info": {
    "description": "This API gets and orders catalog items from different cloud sources.",
    "version": "0.1.0",
    "title": "Catalog API",
    "contact": {
      "email": "support@redhat.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "security": [
    {
      "BasicAuth": []
    },
    {
      "APIKeyAuth": []
    }
  ],
  "tags": [
    {
      "name": "admins",
      "description": "Secured admin-only calls."
    },
    {
      "name": "users",
      "description": "Calls available to both regular users and admins."
    }
  ],
  "paths": {
    "/portfolios": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "List portfolios",
        "operationId": "listPortfolios",
        "description": "Gets a list of portfolios.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of portfolios. An empty list indicate either undefined portfolios in the system or inaccessibility to the caller.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfoliosCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Add a new portfolio",
        "operationId": "createPortfolio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            }
          },
          "description": "Parameters needed to add a Portfolio",
          "required": true
        },
        "description": "Adds a portfolio.\n",
        "responses": {
          "200": {
            "description": "Succesfully added the new portfolio.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidEntity"
          }
        }
      }
    },
    "/portfolios/{id}": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Get a specific portfolio",
        "operationId": "showPortfolio",
        "description": "Gets the portfolio specified by the portfolio ID.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio matching the portfolio ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Portfolio not found."
          },
          "422": {
            "$ref": "#/components/responses/InvalidEntity"
          }
        }
      },
      "patch": {
        "tags": [
          "admins"
        ],
        "summary": "Edit an existing portfolio",
        "operationId": "updatePortfolio",
        "description": "Returns the edited portfolio.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Portfolio"
              }
            }
          },
          "description": "Parameters needed to update a Portfolio",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Portfolio successfully edited.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Portfolio"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/InvalidEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "admins"
        ],
        "summary": "Delete an existing portfolio",
        "operationId": "destroyPortfolio",
        "description": "Deletes the portfolio specified by the ID.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Portfolio Deleted."
          },
          "404": {
            "description": "Portfolio Not Found."
          },
          "422": {
            "description": "Failed to discard child portfolio items."
          }
        }
      }
    },
    "/portfolios/{portfolio_id}/portfolio_items": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Get all portfolio items from a specific portfolio",
        "operationId": "fetchPortfolioItemsWithPortfolio",
        "description": "Gets all portfilio items in the portfolio specified by the given ID.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PortfolioID"
          },
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of portfolio items. An empty list is returned if the portfolio is not connected to any portfolio items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioItemsCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Portfolio not found"
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Add a portfolio item to a portfolio",
        "operationId": "addPortfolioItemToPortfolio",
        "description": "Adds a new portfolio item to an existing portfolio.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PortfolioID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added a portfolio item to the portfolio."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The portfolio or the portfolio item was not found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPortfolioItem"
              }
            }
          },
          "required": true
        }
      }
    },
    "/portfolios/{portfolio_id}/share": {
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Share a portfolio with one or more groups with specific permission",
        "operationId": "sharePortfolio",
        "description": "Share a Portfolio with one or more groups with specific permissions\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PortfolioID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SharePolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully shared the portfolio"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The Portfolio Object or or one or more of the groups was not found."
          }
        }
      }
    },
    "/portfolios/{portfolio_id}/unshare": {
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Unshare a portfolio from one or more groups with specific permission",
        "operationId": "unsharePortfolio",
        "description": "Unshare a Portfolio with one or more groups with specific permissions\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PortfolioID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnsharePolicy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully unshared portfolio"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The Portfolio Object or the one or more of the groups was not found."
          }
        }
      }
    },
    "/portfolios/{portfolio_id}/share_info": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Fetch share information about this portfolio, the response would include a collection of groups and permissions with each group",
        "operationId": "share_info",
        "description": "Fetch share information about a portfolio\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PortfolioID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of group uuid, name and permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShareInfo"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The Portfolio object not found"
          }
        }
      }
    },
    "/portfolio_items": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "List all portfolio items",
        "operationId": "listPortfolioItems",
        "description": "Gets a list of portfolio items.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a list of portfolio items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioItemsCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Add a new portfolio item",
        "operationId": "createPortfolioItem",
        "description": "Adds a name and description for a portfolio item and returns the newly created portfolio item.\n",
        "responses": {
          "200": {
            "description": "The newly created portfolio item.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Service Offering not found."
          },
          "422": {
            "$ref": "#/components/responses/InvalidEntity"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioItem"
              }
            }
          },
          "required": true
        }
      }
    },
    "/portfolio_items/{id}": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Gets a specific portfolio item",
        "operationId": "showPortfolioItem",
        "description": "Gets a specific portfolio item based on the portfolio item ID passed\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio item specified by the given ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The portfolio item ID was not found"
          }
        }
      },
      "delete": {
        "tags": [
          "admins"
        ],
        "summary": "Delete an existing portfolio item",
        "operationId": "destroyPortfolioItem",
        "description": "Deletes the portfolio item based on portfolio item ID passed\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Portfolio item deleted."
          },
          "404": {
            "description": "Portfolio item not found."
          }
        }
      },
      "patch": {
        "summary": "Edit an existing portfolio item",
        "description": "Edits portfolio item specified by the given ID.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortfolioItem"
              }
            }
          },
          "description": "Parameters needed to update a Portfolio Item",
          "required": true
        },
        "operationId": "updatePortfolioItem",
        "responses": {
          "200": {
            "description": "Return the updated portfolio item object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortfolioItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "The portfolio item ID was not found"
          }
        }
      }
    },
    "/portfolio_items/{portfolio_item_id}/service_plans": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Gets all service plans for a specific portfolio item; requires a connection to the topology service.",
        "operationId": "listServicePlans",
        "description": "Gets all service plans for a portfolio item.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PortfolioItemID"
          }
        ],
        "responses": {
          "200": {
            "description": "All Service Plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServicePlan"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Portfolio item not found"
          },
          "500": {
            "description": "Could not access the Topology Service"
          }
        }
      }
    },
    "/portfolio_items/{portfolio_item_id}/provider_control_parameters": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Gets the provider control parameters for this portfolio item; requires control paramaters provided when provisioning the portfolio item.",
        "operationId": "listProviderControlParameters",
        "description": "Gets the provider control parameters for a portfolio item.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PortfolioItemID"
          }
        ],
        "responses": {
          "200": {
            "description": "Return provider control parameters JSON object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProviderControlParameters"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Portfolio item not found"
          },
          "500": {
            "description": "Could not access the Topology Service"
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Get a list of orders",
        "operationId": "listOrders",
        "description": "Gets a list of orders associated with the logged in user.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Create a new order",
        "operationId": "createOrder",
        "description": "Creates a new order.\n",
        "responses": {
          "200": {
            "description": "Returns a newly created order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/orders/{order_id}/order_items": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Gets a list of items in a given order",
        "operationId": "listOrderItems",
        "description": "Gets a list of items associated with an order.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrderID"
          },
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a OrderItemsCollection object with an embedded array of OrderIem objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItemsCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Add an order item to an order in pending state",
        "operationId": "addToOrder",
        "description": "Adds an order item to an order in pending state\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrderID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added an item to order"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Order not found."
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderItem"
              }
            }
          },
          "required": true
        }
      }
    },
    "/orders/{order_id}/order_items/{id}": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Gets an individual order item from a given order",
        "operationId": "showOrderItem",
        "description": "Gets an order item associated with an order.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrderID"
          },
          {
            "$ref": "#/components/parameters/ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single OrderIem object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Either the order or the order item could not be found."
          }
        }
      }
    },
    "/orders/{order_id}/submit_order": {
      "post": {
        "tags": [
          "admins"
        ],
        "summary": "Submit a given order",
        "operationId": "submitOrder",
        "description": "Returns an updated order.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrderID"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated order object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/order_items/{order_item_id}/progress_messages": {
      "get": {
        "tags": [
          "users",
          "admins"
        ],
        "summary": "Gets a list of progress messages in an item",
        "operationId": "listProgressMessages",
        "description": "Gets a list of progress messages associated with an order item. As the item is being processed the provider can update the progress messages.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrderItemID"
          },
          {
            "$ref": "#/components/parameters/QueryLimit"
          },
          {
            "$ref": "#/components/parameters/QueryOffset"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a ProgressMessagesCollection object with an embedded array of ProgressMessage objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgressMessagesCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Order item not found"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://localhost/api/catalog/v1.0"
    },
    {
      "url": "http://localhost/api/catalog/v1.0"
    }
  ],
  "components": {
    "parameters": {
      "ID": {
        "name": "id",
        "in": "path",
        "description": "ID of the resource",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PortfolioID": {
        "name": "portfolio_id",
        "in": "path",
        "description": "The Portfolio ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "PortfolioItemID": {
        "name": "portfolio_item_id",
        "in": "path",
        "description": "The Portfolio Item ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "OrderID": {
        "name": "order_id",
        "in": "path",
        "description": "The Order ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "OrderItemID": {
        "name": "order_item_id",
        "in": "path",
        "description": "The Order Item ID",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "QueryLimit": {
        "in": "query",
        "name": "limit",
        "required": false,
        "description": "The numbers of items to return per page.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 100
        }
      },
      "QueryOffset": {
        "in": "query",
        "name": "offset",
        "required": false,
        "description": "The number of items to skip before starting to collect the result set.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "responses": {
      "InvalidEntity": {
        "description": "The entity being created does not have either all the required parameters specified or the parameter value is invalid."
      },
      "Forbidden": {
        "description": "The caller is forbidden to perform the action."
      },
      "Unauthorized": {
        "description": "The caller is not authorized to access this resource."
      }
    },
    "requestBodies": {
      "Portfolio": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Portfolio"
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "description": "The userid/password is needed when accessing this API externally",
        "scheme": "basic"
      },
      "APIKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-rh-auth-identity",
        "description": "This is a base64 encoded string of a collection of attributes, that identify a user. This token is needed when accessing the API internally."
      }
    },
    "schemas": {
      "Portfolio": {
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "title": "Name",
            "example": "Sample Portfolio"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "example": "This is a sample description for a portfolio."
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": false,
            "example": false
          },
          "image_url": {
            "type": "string",
            "title": "Image URL",
            "format": "url",
            "example": "The public facing image url for a portfolio."
          },
          "workflow_ref": {
            "type": "string",
            "title": "Approval Workflow ID",
            "example": "The current approval workflow selected for a portfolio"
          },
          "owner": {
            "type": "string",
            "title": "Owner",
            "example": "jdoe"
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "title": "Id",
            "example": "ID of the sample organization."
          }
        }
      },
      "CreatePortfolioItem": {
        "type": "object",
        "properties": {
          "service_offering_ref": {
            "type": "string",
            "title": "Service Offering Ref",
            "description": "The service offering ref should be retrieved from a call to the Topology Service.",
            "example": "177"
          }
        }
      },
      "AddPortfolioItem": {
        "type": "object",
        "properties": {
          "portfolio_item_id": {
            "type": "string",
            "title": "Portfolio Item Id",
            "example": "100",
            "description": "This is the ID of the portfolio item object."
          }
        }
      },
      "PortfolioItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "favorite": {
            "type": "boolean",
            "title": "Favorite",
            "example": "Definition of a favorite portfolio item"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "example": "Name of the portfolio item"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "example": "Description of a portfolio item"
          },
          "orphan": {
            "type": "boolean",
            "readOnly": true,
            "title": "Orphan",
            "example": "Boolean if an associated catalog item no longer exists"
          },
          "state": {
            "type": "string",
            "readOnly": true,
            "title": "State",
            "example": "The current state of a portfolio item"
          },
          "display_name": {
            "type": "string",
            "readOnly": true,
            "title": "Display Name",
            "example": "The name of the portfolio item to be displayed in the UI"
          },
          "long_description": {
            "type": "string",
            "readOnly": true,
            "title": "Long Description",
            "example": "The longer description of a portfolio item"
          },
          "distributor": {
            "type": "string",
            "readOnly": true,
            "title": "Distributor",
            "example": "The name of the provider for this Item"
          },
          "documentation_url": {
            "type": "string",
            "readOnly": true,
            "title": "Documentation URL",
            "example": "The URL for documentation of the portfolio item"
          },
          "support_url": {
            "type": "string",
            "readOnly": true,
            "title": "Support URL",
            "example": "The URL for finding support for the portfolio item"
          },
          "workflow_ref": {
            "type": "string",
            "title": "Approval Workflow ID",
            "example": "The approval workflow selected for a portfolio item"
          },
          "owner": {
            "type": "string",
            "title": "Owner",
            "example": "jdoe"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "user_id": {
            "type": "string",
            "readOnly": true
          },
          "state": {
            "type": "string",
            "enum": [
              "Created",
              "Ordered",
              "Failed",
              "Completed"
            ],
            "title": "State",
            "description": "Current State of the order."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at"
          },
          "ordered_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ordered at"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Completed at"
          },
          "owner": {
            "type": "string",
            "title": "Owner",
            "example": "jdoe"
          }
        }
      },
      "OrderItem": {
        "type": "object",
        "required": [
          "service_parameters",
          "count",
          "service_plan_ref",
          "portfolio_item_id",
          "provider_control_parameters"
        ],
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "default": 1,
            "title": "Item Count"
          },
          "service_parameters": {
            "type": "object",
            "title": "JSON object with provisioning parameters"
          },
          "provider_control_parameters": {
            "type": "object",
            "title": "Provider Control Parameters",
            "description": "The provider specific parameters needed to provision this service. This might include namespaces, special keys."
          },
          "service_plan_ref": {
            "type": "string",
            "title": "The Service Plan ref",
            "description": "Stores the service plan ref from the Topology Service."
          },
          "portfolio_item_id": {
            "type": "string",
            "title": "Portfolio Item ID",
            "description": "Stores the Portfolio Item ID."
          },
          "state": {
            "type": "string",
            "enum": [
              "Created",
              "Approval Pending",
              "Ordered",
              "Failed",
              "Completed"
            ],
            "title": "State",
            "description": "Current state of this order item.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created at",
            "readOnly": true
          },
          "ordered_at": {
            "type": "string",
            "format": "date-time",
            "title": "Ordered at",
            "readOnly": true
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Completed at",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Completed at",
            "readOnly": true
          },
          "owner": {
            "type": "string",
            "title": "Owner",
            "example": "jdoe"
          }
        }
      },
      "ProgressMessage": {
        "type": "object",
        "properties": {
          "received_at": {
            "type": "string",
            "format": "date-time",
            "title": "Message Received At",
            "readOnly": true
          },
          "level": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "info",
              "error",
              "warning",
              "debug"
            ]
          },
          "message": {
            "type": "string",
            "example": "This is a sample message",
            "title": "Message",
            "readOnly": true
          },
          "order_item_id": {
            "type": "string",
            "title": "Order Item ID",
            "readOnly": true,
            "format": "uuid"
          }
        }
      },
      "ServicePlan": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the service plan.",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The service plan description.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "title": "ID",
            "description": "The unique identifier for this service plan.",
            "readOnly": true
          },
          "create_json_schema": {
            "type": "object",
            "title": "JSON Schema",
            "description": "JSON schema for the object.",
            "readOnly": true
          }
        }
      },
      "PortfoliosCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Portfolio"
            }
          }
        }
      },
      "PortfolioItemsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioItem"
            }
          }
        }
      },
      "OrdersCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        }
      },
      "OrderItemsCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItem"
            }
          }
        }
      },
      "ProgressMessagesCollection": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CollectionMetadata"
          },
          "links": {
            "$ref": "#/components/schemas/CollectionLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProgressMessage"
            }
          }
        }
      },
      "CollectionLinks": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "title": "First Link",
            "description": "The link to fetch the first group of items in the result set"
          },
          "last": {
            "type": "string",
            "title": "Last Link",
            "description": "The link to fetch the last group of items in the result set"
          },
          "prev": {
            "type": "string",
            "title": "Previous Link",
            "description": "The link to fetch the previous group of items in the result set"
          },
          "next": {
            "type": "string",
            "title": "Next Link",
            "description": "The link to fetch the next group of items in the result set"
          }
        }
      },
      "CollectionMetadata": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "title": "Total number of items in the result set",
            "description": "Total number of items in the result set, of which only a subset is returned, defined by the QueryLimit parameter."
          }
        }
      },
      "ProviderControlParameters": {
        "type": "object",
        "title": "Provider Control Parameters",
        "description": "JSON Schema for Provider control parameters."
      },
      "SharePolicy": {
        "type": "object",
        "required": [
          "permissions",
          "group_uuids"
        ],
        "properties": {
          "permissions": {
            "type": "array",
            "title": "Name",
            "description": "The permissions to apply for this share.",
            "items": {
              "type": "string"
            }
          },
          "group_uuids": {
            "type": "array",
            "title": "The Group UUIDs",
            "description": "An array of group UUID's retrieved from the RBAC Service with whom the resource has to be shared.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UnsharePolicy": {
        "type": "object",
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "type": "array",
            "title": "Name",
            "description": "The permissions to remove for this resource.",
            "items": {
              "type": "string"
            }
          },
          "group_uuids": {
            "type": "array",
            "title": "The Group UUIDs",
            "description": "An array of group UUID's retrieved from the RBAC Service from which the permissions have to be removed. If group uuids are not specified we will unshare it from all groups.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ShareInfo": {
        "type": "object",
        "properties": {
          "group_uuid": {
            "type": "string",
            "title": "The Group UUID",
            "description": "The Group UUID"
          },
          "group_name": {
            "type": "string",
            "title": "The Group Name",
            "description": "The Group Name"
          },
          "permissions": {
            "type": "array",
            "title": "Permissions",
            "description": "One or more permissions currently applied to this group.",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
